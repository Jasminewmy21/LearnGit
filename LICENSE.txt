git init
git add $filename
git commit -m "message"
git status
git diff
git log
git log --pretty=online
HEAD HEAD^ HEAD^^ ...  HEAD~100
eg: git reset --hard HEAD^

git reflog
then find the 'commit id' to version you want

GitCode is 'working directory'

.git is 'repository'

git will automatically create the first 'master' for us and there is a pointer named 'HEAD' to 'master'.

'git add' means adding file modifications to the 'stage'.
'git cmmit' means commiting all the content of 'stage' to the current branch.
Because when we created the Git repository, Git automatically created the only master branch for us, so now, git commit is to commit changes to the master branch.

git checkout -- $file : cancel the operation and back to the last 'git commit' or 'git add'

deleting files is an operation. it will be shown in 'git status'
if you really wanna delete them, you should use 'git rm $filename' and 'git commit'

add remote repository: https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440

'git clone' means cloning a repository from github to local repository.

Create and merge branch

1. HEAD -> master，master才是指向提交，HEAD指向的就是当前分支
2. git checkout -b dev -> git branch dev , git checkout dev
   创建dev分支，切换到dev分支，-b参数表示创建并切换
3. git branch 查看当前分支
4. git checkout master 切换到主分支
5. git merge dev 把dev分支的工作成果合并到master分支
6.git branch -b dev 删除dev分支，如果在当前分支是不能删除分支的

因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

切换分支使用git checkout <branch>，而前面讲过的撤销修改则是git checkout -- <file>，
同一个命令，有两种作用，确实有点令人迷惑。
实际上，切换分支这个动作，用switch更科学。
因此，最新版本的Git提供了新的git switch命令来切换分支：
创建并切换到新的dev分支: git switch -c dev
直接切换到已有分支：git switch master

小结：
查看分支：git branch
创建分支：git branch <name>
切换分支：git switch <name> or git checkout <name>
创建+切换分支：git switch -c <name> or git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支： git branch -d <name>


当Git无法自动合并分支时，必须首先解决冲突，解决完后再提交，合并完成
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交
git log --graph 看分支合并图

分支策略：
实际开发中，master分支应该是非常稳定的，仅用来发布新版本，平时不能在上面干活
干活都在dev分支上，也就是说dev分支不是稳定的。
比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本

每个人都在dev分支干活，每个人都有自己的分支，是不是往dev分支上合并

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过分支
而fast forward合并看不出曾做过合并


